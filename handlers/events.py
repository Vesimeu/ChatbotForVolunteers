from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
from ChatbotForVolunteers.database import get_db
from ChatbotForVolunteers.service.event_service import (
    get_all_events, create_event, delete_event, get_event_by_id, update_event
)
from ChatbotForVolunteers.service.organization_service import get_all_organizations, get_organization_by_id


# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EventState(StatesGroup):
    waiting_for_edit_id = State()
    waiting_for_organization_id = State()
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_description = State()
    waiting_for_location = State()
    waiting_for_contact_info = State()
    waiting_for_volunteers_needed = State()

async def show_events(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    events = await get_all_events()

    if not events:
        await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "üìÖ **–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:**\n\n"
    for event in events:
        organization_name = event.organization.name if event.organization else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        response += (
            f"üÜî **ID:** {event.id}\n"
            f"üìå **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event.name}\n"
            f"üìÖ **–î–∞—Ç–∞:** {event.date.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìç **–ú–µ—Å—Ç–æ:** {event.location}\n"
            f"üìú **–û–ø–∏—Å–∞–Ω–∏–µ:** {event.description}\n"
            f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã:** {event.contact_info}\n"
            f"üë• **–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:** {event.volunteers_needed}\n"
            f"üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {organization_name}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    await message.answer(response)

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def start_create_event(message: types.Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    """
    organizations = await get_all_organizations()
    if not organizations:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
        return

    response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
    response += "\n".join([f"üÜî {org.id} | {org.name}" for org in organizations])
    await message.answer(response)

    await EventState.waiting_for_organization_id.set()


async def process_event_organization_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
    """
    org_id = message.text.strip()
    if not org_id.isdigit():
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
        return

    organization = await get_organization_by_id(int(org_id))
    if not organization:
        await message.answer("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with state.proxy() as data:
        data["organization_id"] = int(org_id)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await EventState.waiting_for_name.set()


async def process_event_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    await EventState.waiting_for_date.set()


async def process_event_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.
    """
    try:
        event_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")
        return

    async with state.proxy() as data:
        data["date"] = event_date

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await EventState.waiting_for_description.set()


async def process_event_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["description"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await EventState.waiting_for_location.set()


async def process_event_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["location"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await EventState.waiting_for_contact_info.set()


async def process_event_contact_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["contact_info"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ (—á–∏—Å–ª–æ):")
    await EventState.waiting_for_volunteers_needed.set()


async def process_event_volunteers_needed(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    async with state.proxy() as data:
        if not message.text.isdigit():
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.")
            return
        data["volunteers_needed"] = int(message.text)

    async for session in get_db():  # ‚úÖ –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        event = await create_event(
            session=session,  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ—Å—Å–∏—é –≤ —Ñ—É–Ω–∫—Ü–∏—é
            name=data["name"],
            date=data["date"],
            description=data["description"],
            location=data["location"],
            contact_info=data["contact_info"],
            volunteers_needed=data["volunteers_needed"],
            organizer_id=message.from_user.id,  # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
            organization_id=data["organization_id"]
        )

        await message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

    await state.finish()


# üìå –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
async def start_delete_event(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    events = await get_all_events()
    if not events:
        await message.answer("‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    response = "üóë –í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    response += "\n".join([f"üÜî {event.id} | {event.name}" for event in events])
    await message.answer(response)

    await EventState.waiting_for_edit_id.set()


async def process_delete_event(message: types.Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
    """
    event_id = message.text.strip()
    if not event_id.isdigit():
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return

    success = await delete_event(int(event_id))
    if success:
        await message.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.finish()


def register_events_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.
    """
    dp.register_message_handler(show_events, text="–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    dp.register_message_handler(start_create_event, text="–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    dp.register_message_handler(process_event_organization_id, state=EventState.waiting_for_organization_id)
    dp.register_message_handler(process_event_name, state=EventState.waiting_for_name)
    dp.register_message_handler(process_event_date, state=EventState.waiting_for_date)
    dp.register_message_handler(process_event_description, state=EventState.waiting_for_description)
    dp.register_message_handler(process_event_location, state=EventState.waiting_for_location)
    dp.register_message_handler(process_event_contact_info, state=EventState.waiting_for_contact_info)
    dp.register_message_handler(process_event_volunteers_needed, state=EventState.waiting_for_volunteers_needed)

    # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    dp.register_message_handler(start_delete_event, text="–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    dp.register_message_handler(process_delete_event, state=EventState.waiting_for_edit_id)
