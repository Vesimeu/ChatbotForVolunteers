from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from service.organization_service import (
    get_all_organizations, create_organization, delete_organization,
    get_organization_by_id, update_organization
)


# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
class OrganizationState(StatesGroup):
    waiting_for_edit_id = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_contact = State()
    waiting_for_website = State()


async def show_organizations(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    organizations = await get_all_organizations()

    if organizations:
        response = "üåø –°–ø–∏—Å–æ–∫ —ç–∫–æ-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:\n\n"
        for org in organizations:
            response += (
                f"üèõ <b>{org.name}</b>\n"
                f"üÜî ID: {org.id}\n"
                f"üìù <i>{org.description}</i>\n"
                f"üåç –°–∞–π—Ç: {org.website if org.website else '–Ω–µ—Ç'}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {org.contact_info}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            )
    else:
        response = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫–æ-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π."

    await message.answer(response, parse_mode="HTML")


# üìå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
async def start_create_organization(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    await OrganizationState.waiting_for_name.set()


async def process_org_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    await OrganizationState.waiting_for_description.set()


async def process_org_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["description"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    await OrganizationState.waiting_for_contact.set()


async def process_org_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["contact_info"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await OrganizationState.waiting_for_website.set()


async def process_org_website(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        website = None if message.text.lower() == "–Ω–µ—Ç" else message.text
        organization = await create_organization(
            name=data["name"],
            description=data["description"],
            contact_info=data["contact_info"],
            website=website
        )
    await message.answer(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{organization.name}' —Å–æ–∑–¥–∞–Ω–∞.")
    await state.finish()


# üìå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
async def start_delete_organization(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    organizations = await get_all_organizations()
    if not organizations:
        await message.answer("‚ùå –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    response = "üóë –í–≤–µ–¥–∏—Ç–µ ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    response += "\n".join([f"üÜî {org.id} | {org.name}" for org in organizations])
    await message.answer(response)

    await OrganizationState.waiting_for_edit_id.set()


async def process_delete_organization(message: types.Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.
    """
    org_id = message.text.strip()
    if not org_id.isdigit():
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    success = await delete_organization(int(org_id))
    if success:
        await message.answer("‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await state.finish()


def register_organization_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏.
    """
    dp.register_message_handler(show_organizations, text="–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    dp.register_message_handler(start_create_organization, text="–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
    dp.register_message_handler(process_org_name, state=OrganizationState.waiting_for_name)
    dp.register_message_handler(process_org_description, state=OrganizationState.waiting_for_description)
    dp.register_message_handler(process_org_contact, state=OrganizationState.waiting_for_contact)
    dp.register_message_handler(process_org_website, state=OrganizationState.waiting_for_website)
    dp.register_message_handler(start_delete_organization, text="–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é")
    dp.register_message_handler(process_delete_organization, state=OrganizationState.waiting_for_edit_id)
