import asyncio
from datetime import datetime, timedelta

import pytz
from aiogram import types, Bot
from aiogram.dispatcher import Dispatcher
from aiogram.utils.exceptions import ChatNotFound
from sqlalchemy.testing.plugin.plugin_base import logging
import logging
from ChatbotForVolunteers.database import get_db
from ChatbotForVolunteers.handlers.events import show_events
from ChatbotForVolunteers.handlers.organizations import show_organizations
from ChatbotForVolunteers.service.event_service import get_all_events,get_all_events_with_session
from ChatbotForVolunteers.service.user_service import update_subscription_status, get_subscribed_users, get_subscribed_users_with_session

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
bot: Bot  # üëà –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ (UTC+5)
ekaterinburg_tz = pytz.timezone('Asia/Yekaterinburg')
async def subscribe_to_newsletter(message: types.Message):
    """
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∑–∞ 2 –¥–Ω—è.
    """
    success = await update_subscription_status(message.from_user.id, True)
    if success:
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    else:
        await message.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")

async def send_event_notifications(bot: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    while True:
        async for db in get_db():
            async with db as session:
                events = await get_all_events_with_session(session)
                subscribers = await get_subscribed_users_with_session(session)

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ
                now = datetime.now(ekaterinburg_tz)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º event.date –≤ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–∏–≤–Ω–∞—è
                upcoming_events = [
                    event for event in events
                    if timedelta(days=2) >= event.date.astimezone(ekaterinburg_tz) - now > timedelta(0)
                ]

                logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ: {now}")

                for event in upcoming_events:
                    message_text = (
                        f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                        f"üìÖ **–°–∫–æ—Ä–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:** {event.name}\n"
                        f"üìÜ –î–∞—Ç–∞: {event.date.strftime('%Y-%m-%d %H:%M')}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {event.location}\n"
                        f"üîó –ö–æ–Ω—Ç–∞–∫—Ç—ã: {event.contact_info}\n\n"
                        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 2 –¥–Ω–µ–π!"
                    )

                    for user in subscribers:
                        try:
                            await bot.send_message(user.telegram_id, message_text)
                        except ChatNotFound:
                            logging.info(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏.")
                            await update_subscription_status(user.telegram_id, False)

        await asyncio.sleep(3600)  # üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def register_participant_handlers(dp: Dispatcher, bot_instance: Bot):
    global bot
    bot = bot_instance
    dp.register_message_handler(show_organizations, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —ç–∫–æ-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    dp.register_message_handler(show_events, text="–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    dp.register_message_handler(subscribe_to_newsletter, text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")